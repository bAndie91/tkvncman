#!/usr/bin/env perl

use Data::Dumper;
use POSIX qw/:sys_wait_h/;
use Tk;
use Tk::JPEG;
use MIME::Base64;
use Time::HiRes qw/gettimeofday usleep/;
use File::Temp qw/tempfile/;
use IPC::Open3;
use Symbol qw/gensym/;
use Crypt::DES;
use XML::Simple;
use Socket;
use Fcntl;
use Errno;
use IO::Select;

$Crypter = new Crypt::DES(pack("H16", "E84AD660C4721AE0"));
$sess_dir = $ENV{'HOME'}."/.vnc/sessions";
$pref_file = $ENV{'HOME'}."/.vnc/tkvncman.xml";
$Loaded = undef;
$Cwd = '';
$Unsaved = $textarea1_modlock = $replacer_lock = $textarea1_ignore_modify = 0;
$vnchost, $vncport, $vncpass_hash, %vncopt;
@PreferredEncoding = qw/JPEG Zlib ZRLE TRLE hextile raw JRLE/;
%ColourLevel = qw/rgb111 0 rgb222 1 pal8 2 full full/;
%ColourLevel_rev = reverse %ColourLevel;
%ColourLevel_txt = (0=>"3 bit", 1=>"6 bit", 2=>"8 bit", 'full'=>"Full");
$str_unsaved = "Unsaved Session";
$Pref = (-f $pref_file) ? XMLin($pref_file) : {};
%Pref = %$Pref;



while(scalar @ARGV) {
	if($ARGV[0] eq '-d') {
		shift @ARGV;
		if(-d $ARGV[0]) {
			$sess_dir = $ARGV[0];
		} else {
			warn "$ARGV[0]: not a directory";
		}
	}
	shift @ARGV;
}


$window1 = new MainWindow( -title=>"tkVNCman" );
sub mk_splash_window {
	# @_ => $title, $label1, $label2, $label3, \$text_var, $parent_window
	# return => \{window, label1, label2, label3}
	my %w;
	$w{"window"} = $_[5]->Toplevel(-title=>$_[0]);
	$w{"window"}->geometry("400x100");
	$w{"label1"} = $w{"window"}->Label(-text=>$_[1])->pack(-expand=>1, -fill=>'both');
	$w{"label2"} = $w{"window"}->Label(-text=>$_[2])->pack(-expand=>1, -fill=>'both');
	$w{"label3"} = $w{"window"}->Label(-text=>$_[3], -anchor=>'e')->pack(-expand=>1, -fill=>'x', -side=>'left');
	$w{"window"}->Label(-textvariable=>$_[4], -anchor=>'w')->pack(-expand=>1, -fill=>'x', -side=>'left');
	$w{"window"}->protocol('WM_DELETE_WINDOW', sub{return;});
	$w{"window"}->bind('<Unmap>', sub{$w{"window"}->deiconify});
	$w{"window"}->resizable(0, 0);
	return \%w;
}

$frame1 = $window1->Frame();
$adjuster1 = $window1->Adjuster( -widget=>$frame1, -side=>'left' );
$frame2 = $window1->Frame();
$label1 = $frame2->Label( -text=>"Select a VNC session!", -foreground=>"darkgreen", -background=>"white", -relief=>'groove' );
$tooltip1 = $label1->Balloon(-background=>"lightyellow");
$tooltip1->attach($label1, -initwait=>300, -balloonposition=>'mouse', -balloonmsg=>"Click to Rename");

$menubar1 = $window1->Menu();


		use Linux::Inotify2;
#eval q{	use Linux::Inotify2; 1; } or $no_watch=1;
sub add_watch {
	if(not$no_watch) {
		my $obj = Linux::Inotify2->new();
		if(not defined $obj) {
			warn "Inotify2: $!";
			return 0;
		}
		push @watcher, $obj;
		my $wref = \$watcher[$#watcher];
		$$wref->watch($_[0], IN_CREATE|IN_DELETE|IN_MODIFY|IN_MOVE, \&sess_load);
		$$wref->blocking(0);
		$window1->repeat(1000, sub{ $$wref->poll; });
	}
}
sub add_watch_recursive {
	add_watch($_[0]);
	opendir my $dh, $_[0];
	add_watch_recursive($_[0]."/".$_) for grep { -d $_[0]."/".$_ and !/^\./ } readdir $dh;
	close $dh;
}
if($no_watch) {
	$frame1->Button( -text=>"Refresh", -height=>1, -command=>\&sess_load )->pack(qw/-side bottom -fill x -expand 0/);
}
else {
	add_watch_recursive($sess_dir);
}



$menubar1->command( -label=>"~Connect", -command=>sub{ SessStart($textarea1->Contents, 'vncviewer'); } );
if(system("which vncsnapshot")==0) {
	$menubar1->command( -label=>"Sna~pshot", -command=>sub{ SessStart($textarea1->Contents, 'vncsnapshot'); } );
} else {
	print STDERR "No vncsnapshot installed.\n";
}

$menuitem3 = $menubar1->command( -label=>"~Save", -command=>\&SessSave );
$menubar1->command( -label=>"~New", -command=>\&SessNew );
$menubar1->separator();
$menubar1->command( -label=>"E~xit", -foreground=>"darkred", -activebackground=>"darkred", -activeforeground=>"white", -command=>\&mori );
$window1->configure( -menu=>$menubar1 );


$treebox1 = $frame1->Scrolled(
	'HList',
	-height=>0,
	-width=>18,
	-scrollbars=>'e',
	-selectmode=>'single',
	-separator=>'/',
	-itemtype=>'text',
	-browsecmd=>\&tree_click,
);
$menubar3 = $treebox1->Menu( -tearoff=>0, -menuitems=>[
	[Button => "Copy", -command => sub {
		my $file = get_anchored_file();
		copy($file, $file);
	}],
	[Button => "Delete", -command => \&SessDel],
	[Separator=>1],
	[Button => "Import...", -command => sub{
		my $entry = $treebox1->info('anchor');
		my $data = $treebox1->info( "data"=>$entry );
		my $folder = $folder = $sess_dir."/".$entry;
		if($data->{"file"}) {
			$folder = $sess_dir."/".dirname($entry);
		}
		my $selected = $window1->getOpenFile(
			-defaultextension=>".vnc",
			-filetypes=>[
				["VNC sessions", ".vnc"],
				["All files", "*"],
			],
			-initialdir=>$folder,
			-title=>"Saved VNC sessions",
		);
		if(-e $selected) {
			copy($selected, $folder."/".basename($selected).".vnc");
		}
	}],
]);

$textarea1 = $frame2->Scrolled(
	'Text',
	-scrollbars=>'osoe',
	-height=>'1',
	-width=>'1',
	-wrap=>'no',
);
$frame3 = $frame2->Frame(
	-relief=>'sunken',
	-height=>'1',
	-width=>'1',
);

$row = -1;
$frame3->Label(	-text=>"Host"
	)->grid(-row=>++$row, -column=>0, -sticky=>'nw');
$inputbox4 =
$frame3->Entry(	-textvariable=>\$vnchost, 
		-vcmd=>sub {
			replacer('host', $_[0]);
			return 1;
		},
		-validate=>'key',
	)->grid(-row=>$row, -column=>1, -columnspan=>3, -sticky=>'nw');

$frame3->Label(	-text=>"Port" )->grid(-row=>++$row, -column=>0, -sticky=>'nw');
$inputbox3 =
$frame3->Entry(	-textvariable=>\$vncport, 
		-vcmd=>sub {
			$_ = $_[0];
			return replacer('port', $_) if /^\d*$/ and $_<65536;
			$vncport = $_[2];
			return 1;
		},
		-validate=>'key',
	)->grid(-row=>$row, -column=>1, -columnspan=>3, -sticky=>'nw');
$inputbox3->bind('<Up>'   => sub{$vncport<65536 and $vncport++});
$inputbox3->bind('<Down>' => sub{$vncport>0 and $vncport--});

$frame3->Label(	-text=>"Password" )->grid(-row=>++$row, -column=>0, -sticky=>'nw');
$inputbox2 = $frame3->Entry( -textvariable=>\$vncpass, -show=>'*', -width=>16,
		-vcmd=>sub{
			replacer('password', $_[0] eq '' ? '' : pass_enc($_[0]));
			return 1;
		},
		-validate=>'key'
	)->grid(-row=>$row, -column=>1, -columnspan=>2, -sticky=>'nw');
$button2 = 
$frame3->Button( -width=>16, -height=>15, 
	-command=>[sub {
		$inputbox2->configure( -show=> defined $inputbox2->cget('-show') ? undef : '*' );
	}],
	-image=>$frame3->Pixmap(-data=> <<EOF
		/* XPM */
		static char *a[] = {
		"15 17 2 1",
		"  c #000000000",
		". c #d9dd9dd9d",
		"...............",
		"...............",
		"...............",
		"....        ...",
		"...    .. .....",
		"..     .. .....",
		"..     .. .....",
		"..     .. .....",
		"...    .. .....",
		"....   .. .....",
		"...... .. .....",
		"...... .. .....",
		"...... .. .....",
		"...... .. .....",
		"...... .. .....",
		"...............",
		"..............."
		};
EOF
	))->grid(-row=>$row, -column=>3, -sticky=>'nw');
$tooltip2 = $button2->Balloon(-background=>"lightyellow");
$tooltip2->attach($button2, -initwait=>300, -balloonposition=>'mouse', -balloonmsg=>"Show / Hide password");

# WORKAROUND FIXME
$window1->repeat(1000, sub {
	$inputbox2->configure(-validate=>'key');
	$inputbox3->configure(-validate=>'key');
	$inputbox4->configure(-validate=>'key');
});

$frame3->Label(-text=>"Preferred Encoding")->grid(-row=>++$row, -column=>0, -columnspan=>2, -sticky=>'nw');
$opt_txt{'preferredencoding'} = 'auto';
$frame3->Optionmenu(
	-options=>[["auto", 'auto'], map {[$_, $_]} @PreferredEncoding],
	-variable=>\$vncopt{'preferredencoding'},
	-textvariable=>\$opt_txt{'preferredencoding'},
	-command=>sub{
		return unless defined $Loaded;
		my $v = shift;
		if($v eq 'auto') {
			replacer('AutoSelect', 1);
		} else {
			replacer('Preferred_Encoding', $v);
			replacer('AutoSelect', 0);
		}
	},
    )->grid(-row=>$row, -column=>2, -columnspan=>2, -sticky=>'nw');

$frame3->Label(-text=>"Color Depth")->grid(-row=>++$row, -column=>0, -columnspan=>2, -sticky=>'nw');
$opt_txt{'lowcolourlevel'} = $ColourLevel_txt{1};
$frame3->Optionmenu(
	-options=>[["auto", 'auto'], map {[$ColourLevel_txt{$_}, $_]} sort keys %ColourLevel_txt],
	-variable=>\$vncopt{'lowcolourlevel'},
	-textvariable=>\$opt_txt{'lowcolourlevel'},
	-command=>sub{
		return unless defined $Loaded;
		my $v = shift;
		replacer('Color_Level', $ColourLevel_rev{$v});
		replacer('Full_Color', $v eq 'full' ? 1 : 0);
	},
    )->grid(-row=>$row, -column=>2, -columnspan=>2, -sticky=>'nw');

for my $lbl (qw/FullScreen Shared ViewOnly/) {
	$frame3->Checkbutton(
		-text=>$lbl,
		-onvalue=>1,
		-offvalue=>0,
		-variable=>\$vncopt{lc $lbl},
		-command=>sub { replacer($lbl, $vncopt{lc $lbl}) },
	)->grid(-row=>++$row, -column=>0, -sticky=>'nw', -columnspan=>2);
}



$frame4 = $frame2->Frame();
$frame4->Button(-textvariable=>\$button3_text, -command=>\&toggle_adv_bas)->pack(qw/-side bottom -anchor s -side right/);
$button3_text = "Basic <<";


$dialog1 = $window1->DialogBox( 
	-title   => "Rename",
	-buttons => ["ok", "cancel"] 
);
$inputbox1 = $dialog1->add('LabEntry', -width=>40)->pack();
$dialog2 = $window1->MsgBox(
	-title=>"Delete", 
	-message=>"Delete this session?", 
	-icon=>'warning', 
	-type=>'yesno', 
	-default=>'no'
);
$dialog3 = $window1->MsgBox(
	-title=>"Error", 
	-icon=>'error', 
	-type=>'ok', 
);




sub pass_enc { return join '', map {sprintf "%02x", ord $_} split //, $Crypter->encrypt(substr $_[0].("\x00" x 8), 0, 8); }
sub pass_dec { return $Crypter->decrypt(join '', map {chr hex $_} grep {length} split /(..)/, $_[0]); }

sub basename { return(($_[0] =~ /([^\/]+?)\.[^\.]+$/)[0]); }
sub dirname  { return(($_[0] =~ /^(.*)\/[^\/]+$/)[0]); }

sub copy {
	my $file1 = $_[0];
	my $file2 = $_[1];
	my $file2_ext = '';
	if($file2 =~ /^(.*?)(\.[^\/\.]+)$/) {
		($file2, $file2_ext) = ($1, $2);
	}
	$file2 =~ s/( \((\d+)\))?$/" (".($2?$2+1:2).")"/e while(-e "$file2$file2_ext");
	$file2 = "$file2$file2_ext";
	open my $fh1, '<', $file1 or return 0;
	open my $fh2, '>', $file2 or return 0;
	print $fh2 $_ while <$fh1>;
	close $fh2;
	close $fh1;
}

sub replacer {
	return 1 if $replacer_lock;
	my $_ = $textarea1->Contents;
	my $cpos = $textarea1->index('insert') || '1.0';
	my($ypos) = ($textarea1->yview);
	my($xpos) = ($textarea1->xview);

	my $key = $_[0];
	my $nkey = $key;
	$key =~ s/_/_?/g;
	$key =~ s/(C)olor/$1olou?r/ig;
	$nkey =~ s/_//g;
	$nkey =~ s/(C)olou?r/$1olor/ig;

	s/^(\s*)($key)(\s*)=.*/$1$2$3=$_[1]/mi   or  s/\n*$/\n$nkey=$_[1]\n/;
	s/\n*$/\n/;
	$textarea1->Contents($_) if $textarea1->Contents ne $_;
	$textarea1->SetCursor($cpos);
	$textarea1->yviewMoveto($ypos);
	$textarea1->xviewMoveto($xpos);
	return 1;
}

sub parse_textarea {
	$replacer_lock = 1;
	for(split /[\r\n]+/, $_[0]) {
		s/\s*$//;
		my ($_, $val) = (/^\s*(\S+)\s*=\s*(.*)/);
		if(/^host$/i && $val!~/\s/) { $vnchost = $val; }
		elsif(/^port$/i && $val=~/^\d*$/ && $val<65536) { $vncport = $val; }
		elsif(/^AutoSelect|FullScreen|Shared|ViewOnly|MenuKey|DotWhenNoCursor|UseLocalCursor|Log|Full_?Colou?r$/i) {
			s/_//g;
			s/Colour/Color/;
			$vncopt{lc $_} = $val;
			if(/^Full_?Colou?r$/i and $val == 1) {
				$opt_txt{'lowcolourlevel'} = $ColourLevel_txt{'full'};
			}
		}
		elsif(/^Colou?r_?Level$/i and exists $ColourLevel{$val}) {
			$vncopt{'lowcolourlevel'} = $ColourLevel{$val};
			$opt_txt{'lowcolourlevel'} = $ColourLevel_txt{$vncopt{'lowcolourlevel'}};
		}
		elsif(/^Preferred_?Encoding$/i) {
			s/_//g;
			if($val =~ /^\d+$/) {
				$val = $PreferredEncoding[$val];
			}
			if(grep {$val eq $_} @PreferredEncoding) {
				$vncopt{lc $_} = $opt_txt{lc $_} = $val;
			}
		}
		elsif(/^ClientCutText$/i) { $vncopt{'sendclipboard'}=$opt{'sendprimary'}=$val; }
		elsif(/^ServerCutText$/i) { $vncopt{'acceptclipboard'}=$val; }
		elsif(/^password$/i && $val=~/^[[:xdigit:]]{16}$/i) { $vncpass_hash = $val; $vncpass = pass_dec($val); }
	}
	#print STDERR Dumper \%vncopt;
	$replacer_lock = 0;
}
sub get_opts {
	my @options;
	for my $k (keys %vncopt) {
		if($k eq 'preferredencoding') {
			next unless($vncopt{'autoselect'} == 0 and grep {$vncopt{$k} eq $_} @PreferredEncoding);
		}
		if($k eq 'lowcolourlevel') {
			next unless($vncopt{'fullcolor'} == 0  and grep {$vncopt{$k} eq $_} values %ColourLevel);
		}
		push @options, "-$k=$vncopt{$k}";
	}
	return @options;
}

sub toggle_adv_bas {
	my $w_delta;
	if(eval q{$textarea1->packInfo;1;}) {
		$w_delta = $textarea1->width;
		$w_delta = -($w_delta<=1 ? 220 : $w_delta);
		$textarea1->packForget;
		Pref('ini_editor', 0);
	}
	else {
		$w_delta = $textarea1_width<=1 ? 220 : $textarea1_width;
		$textarea1->pack(qw/-side right -fill both -expand 1 -after/, $label1);
		Pref('ini_editor', 1);
	}
	my $geometry = $window1->geometry;
	$geometry =~ s/(\d+)/$1+$w_delta/e;
	resize($geometry);
	btn3text();
}
sub resize {
	# damn workaround
	if($window1->geometry ne $_[0]) {
		$window1->geometry($_[0]);
		$window1->after(10, [\&resize, @_]);
	}
}

sub vncsnapshot {
	my $display = $_[0];
	my %opt = %{$_[1]};
	my $size_ref = $_[2];
	my ($vncsnapshot);
	if(not defined $opt{'PasswordFile'}) {
		my ($tmpfh, $tmpfile) = tempfile();
		# create an empty file avoid tty block by vncsnapshot prompting for password on password-protected vnc servers
		close $tmpfh;
		$opt{'PasswordFile'}=$tmpfile;
	}
	my @args = ('vncsnapshot', '-passwd', $opt{'PasswordFile'}, '-cursor', '-allowblank', $display, "/dev/stdout");
	local $, = ' ';
	print @args, "\n";
	
	my($img, $errstr);
	my $imgfd = gensym;
	my $errfd = gensym;
	my $pid = open3('/dev/zero', $imgfd, $errfd, @args);
	

	@FDS = (
		[\$imgfd, \$img],
		[\$errfd, \$errstr],
	);
	
	CHECK_FDS:
	my $input = '';
	my $eof_all = 1;
	for my $a (@FDS) {
		vec($input, fileno(${$a->[0]}), 1) = 1;
	}
	my $nfound = select($input, undef, undef, 0.5);
	$window1->update;
	goto CHECK_FDS unless $nfound;
	for my $a (@FDS) {
		my $fd = ${$a->[0]};
		if(vec($input, fileno($fd), 1) == 1) {
			if(!eof($fd)) {
				${$a->[1]} .= <$fd>;
				$$size_ref = length(${$a->[1]}) . " B";
				$eof_all = 0;
			}
		}
	}
	if(!$eof_all) {
		goto CHECK_FDS;
	}


	waitpid $pid, 0;
	$vncsnapshot = $?>>8;
	
	if($vncsnapshot==0) {
		$vncopt{'PasswordFile'} = $opt{'PasswordFile'};
	} else {
		my $_ = $opt{'PasswordFile'};
		unlink $_ or warn "$_: $!";
		$dialog3->configure( -message=>"vncsnapshot error", -detail=>"$errstr\n(exit code $vncsnapshot)" );
		$dialog3->Show();
	}
	return($img, $vncsnapshot);
}

sub SessStart {
	parse_textarea($_[0]);
	
	if(not $vnchost) { return 0; }
	my $display = $vnchost;
	if($vncport) { $display .= "::$vncport"; }
	
	my ($tmpfh, $tmpfile, $vncpass_hash_bin);
	if($vncpass_hash) {
		($tmpfh, $tmpfile) = tempfile();
		$vncpass_hash_bin = $vncpass_hash;
		$vncpass_hash_bin =~ s/(..)/chr hex $1/eg;
		print $tmpfh $vncpass_hash_bin;
		close $tmpfh;
		$vncopt{'PasswordFile'} = $tmpfile;
	}
	else {
		delete $vncopt{'PasswordFile'};
	}
	
	if($_[1] eq 'vncsnapshot') {
		my $size_var = 0;
		my $splash = mk_splash_window("Creating snapshot...", "Creating snapshot:", $display, "Loaded: ", \$size_var, $window1);
		$splash->{"window"}->update;
		
		my ($img, $vncsnapshot) = vncsnapshot($display, \%vncopt, \$size_var);
		$splash->{"window"}->destroy;
		return $vncsnapshot if $vncsnapshot != 0;
		
		my $window2 = $window1->Toplevel( -title=>"VNC snapshot on [$display] at ".scalar(localtime) );
		$window2->geometry("640x480");
		$window2->Label(Name=>"passwordFile", -text=>$vncopt{'PasswordFile'});
		my $label2 = $window2->Scrolled('Frame', -scrollbars=>'osoe')->pack(-expand=>1, -fill=>'both')
		->Label(
			-image=>$window2->Photo(-data=>encode_base64($img),
			-format=>'jpeg')
		);
		undef $img;
		$label2->pack( -expand=>1, -fill=>'both' );

		my $menubar2 = $label2->Menu( -tearoff=>0, -menuitems=>[
		    	[Button=>"Refresh", -command=>[sub {
				my $size_var = 0;
		    		my $splash = mk_splash_window("Creating snapshot...", "Creating snapshot:", $_[0], "Loaded: ", \$size_var, $_[2]);
				$splash->{"window"}->update;

		    		my ($img, $vncsnapshot) = vncsnapshot($_[0], $_[1], \$size_var, $_[2]);
				$splash->{"window"}->destroy;
		    		if($vncsnapshot==0) {
					$window2->configure( -title=>"VNC snapshot on [" . $_[0] . "] at " . scalar(localtime) );
					$label2->configure( -image=>$_[2]->Photo(-data=>encode_base64($img), -format=>'jpeg') );
				}
		    	}, $display, \%vncopt, $window2]],
			[Button=>"Save image", -command=>sub {
				my $file = $window2->getSaveFile(-defaultextension=>".jpg", -initialfile=>"vncsnapshot.jpg", -title=>"Save image");
				if(defined $file) {
					my $img = decode_base64( $label2->cget('-image')->cget('-data') );
					open my $imgfd, '>', $file or goto FAILED;
					print $imgfd $img or goto FAILED;
					close $imgfd or goto FAILED;
					return 1;
					FAILED:
					$dialog2->configure( -message=>"Save file error", -detail=>$! );
					$dialog2->Show();
				}
			}],
			[Separator=>1],
			[Button=>"Close", -command=>[\&close_toplevel, $window2]]
		]);

		$window2->bind('<Escape>' => [\&close_toplevel, $window2]);
		$window2->bind('<q>' => [\&close_toplevel, $window2]);
		$label2->bind('<Button-3>' => [sub {
			my($w, $x, $y) = @_;
			my $menubar2;
			for($w->children) {
				if($_->class eq 'Menu') {
					$_->unpost;
					$menubar2 = $_;
				}
			}
			$menubar2->post($x, $y);
		}, Ev('X'), Ev('Y')]);
		
		$label2->bind('<Button-1>'=>[sub {
			my $w = shift;
			$_->class eq 'Menu' and $_->unpost for $w->children;
		}]);
	}
	else {
		my $fork = fork;
		if($fork==0) {
			my @args = ('xvncviewer', $display, get_opts());
			local $, = ' ';
			print @args, "\n";
			open STDIN, '/dev/zero';
			exec @args;
		}
		else {
			push @Forks, {'pid'=>$fork, 'file'=>$tmpfile};
		}
	}
}
sub sess_save {
	$_[1] =~ s/\n$//;
	$_[1] =~ s/\n/\r\n/g;
	open my $fh, '>', $_[0] or return 0;
	print $fh $_[1];
	close $fh;
}
sub SessSave {
	if(not defined $Loaded or $Loaded eq $str_unsaved) {
		$inputbox1->delete(0, 'end');
		my $display = $vnchost;
		if($vncport>=5900 && $vncport<=5950) {
			$display .= ':'.($vncport-5900);
		} else {
			$display .= '::'.$vncport;
		}
		$inputbox1->insert(0, $display);
		my $old_title = $dialog1->cget('-title');
		$dialog1->configure(-title=>"Give a name");
		$inputbox1->focus(-force);
		if($dialog1->Show() eq "ok") {
			my $name = $inputbox1->get;
			$name =~ s/[\/\\]//g;
			$Loaded = "$sess_dir/$Cwd/$name.vnc";
			$Loaded =~ s/\/+/\//g;
		}
		$dialog1->configure(-title=>$old_title);
	}
	if(defined $Loaded and $Loaded ne $str_unsaved) {
		if(!-e $Loaded) {
			# Loaded file deleted in meantime.
			$Loaded = $sess_dir."/".$Cwd."/".basename($Loaded).".vnc";
		}
		sess_save($Loaded, $textarea1->Contents) and
		$menuitem3->configure( -foreground=>"", -activeforeground=>"" );
		$Unsaved = 0;
	}
}
sub SessNew {
	$Loaded = $str_unsaved;
	$label1->configure( -text=>$str_unsaved, -foreground=>"black" );
	$textarea1->Contents("host=\nport=\n");
	$textarea1->SetCursor('1.5');
	$textarea1->focus();
}
sub sess_load {
	$treebox1->delete('all');
	my @d = split/\/+/, $sess_dir;
	for(1..$#d) {
		my $d = join '/', @d[0..$_];
		if(! -e $d) { mkdir $d; }
	}
	sess_load_recursive($sess_dir, "");
}
sub sess_load_recursive {
	my $dir = $_[0];
	my $parents = $_[1] || '';
	$parents =~ s/\/*$/\// if length $parents;

	opendir my $dh, $dir;
	for(sort {$a cmp $b} grep { -d "$dir/$_" and !/^\./ } readdir $dh) {
		#my $label = "[$_]";
		my $label = "$_";
		$treebox1->add( "$parents$_", -text=>$label, -data=>{"node"=>1, "expanded"=>1} );
		sess_load_recursive("$dir/$_", "$parents$_");
	}
	rewinddir $dh;
	for my $filename (sort {$a cmp $b} grep { -f "$dir/$_" and /\.vnc$/i } readdir $dh) {
		my $label = $filename;
		$label =~ s/\.[^\.]+$//i;
		$treebox1->add("$parents$filename", -text=>$label, -data=>{"leaf"=>1, "file"=>"$dir/$filename"});
	}
	rewinddir $dh;
	for my $filename (sort {$a cmp $b} grep { -f "$dir/$_" and /\.lsListend$/i } readdir $dh) {
		my $label = $filename;
		$label =~ s/\.[^\.]+$//i;
		$treebox1->add("$parents$filename", -text=>"$label (*)", -data=>{"dynamic"=>1, "file"=>"$dir/$filename", "expanded"=>0});
	}
	close $dh;
}
sess_load();
sub tree_click {
	my $entry = $_[0];
	my $data = $treebox1->info( data=>$entry );
	if($data->{"node"}) {
		$Cwd = $entry;
		my $text = $treebox1->entrycget( $entry, '-text' );
		if($data->{"expanded"}) {
			for my $child ($treebox1->info( children=>$entry )) {
				$treebox1->hide( entry=>$child );
			}
			$text .= " (*)";
			$data->{"expanded"} = 0;
			$treebox1->entryconfigure( $entry, -text=>$text, -data=>$data );
		}
		else {
			for my $child ($treebox1->info( children=>$entry )) {
				$treebox1->show( entry=>$child );
			}
			$text =~ s/\s*\Q(*)\E$//;
			$data->{"expanded"} = 1;
			$treebox1->entryconfigure( $entry, -text=>$text, -data=>$data );
		}
	}
	elsif($data->{"leaf"}) {
		my $now = scalar gettimeofday;
		my $file = $data->{"file"};
		if($Click{$file} > $now-1.0 and $Loaded eq $file) {
			return SessStart($textarea1->Contents, 1);
		}
		$Click{$file} = $now;
		SessLoad($file);
	}
	elsif($data->{"dynamic"}) {
		my $text = $treebox1->entrycget( $entry, '-text' );
		$treebox1->delete('offsprings', $entry);
		if($data->{"expanded"}) {
			$text .= " (*)";
			$data->{"expanded"} = 0;
			$treebox1->entryconfigure( $entry, -text=>$text, -data=>$data );
		}
		else {
			SessLoad($data->{"file"});
			
			open my $fh, '<', $data->{"file"};
			my($host, $port, $proto, $n);
			$proto = 'tcp';
			$n = 0;
			while(<$fh>) {
				if(/^\s*lsListend_(host|port)\s*=\s*([a-z0-9_\.-]+)/i) {
					eval "\$$1 = '$2';";
				}
			}
			close $fh;
			my $splash = mk_splash_window("Connecting to lsListend...", "Requesting active VNC sessions from", "$proto://$host:$port", "Loaded: ", \$n, $window1);
			$splash->{"window"}->update;
			if(defined $host and defined $port) {
				my ($socket, $flags, $ipa, $errstr);
			    	my $now = scalar gettimeofday;

				socket($socket, PF_INET, SOCK_STREAM, getprotobyname($proto));
				$flags = fcntl($socket, F_GETFL, $flags);
				fcntl($socket, F_SETFL, $flags | O_NONBLOCK);
				$ipa = inet_aton $host;
				if(not defined $ipa) {
					$dialog3->configure( -message=>"Host not found", -detail=>$host );
					$dialog3->Show();
					goto NO_SOCKET;
				}
				my $socket_input = IO::Select->new($socket);
				if(!connect($socket, sockaddr_in($port, $ipa))) {
					$errstr = $!;
					if($!{EINPROGRESS}) {
						while(!$socket_input->can_read(0.2)) {
							if(scalar gettimeofday > $now + 5) {
								$dialog3->configure( -message=>"Network Timeout", -detail=>'' );
								$dialog3->Show();
								goto NO_SOCKET;
							}
							$splash->{"window"}->update;
						}
					}
					else {
						$dialog3->configure( -message=>"Network Error", -detail=>$errstr );
						$dialog3->Show();
						goto NO_SOCKET;
					}
				}
			    	
				while(1) {
					if($socket_input->can_read(0.2)) {
						$_ = <$socket>;
						last if $_ eq '';
						$n++;
						my ($tcp_port, $session_name, $session_num, $winvnc_pid) = split /\s+/;
						if(!$treebox1->info('exists', "$entry/$session_name")) {
							$treebox1->add("$entry/$session_name", -text=>$session_name, -data=>{"logon_session"=>1, "port"=>$tcp_port});
						}
					}
					$splash->{"window"}->update;
				}
				if($! ne '') {
					$dialog3->configure( -message=>"Communication Error", -detail=>$! );
					$dialog3->Show();
				}
				close $socket;
				
				$text =~ s/\s*\Q(*)\E$//;
				$data->{"expanded"} = 1;
				$treebox1->entryconfigure( $entry, -text=>$text, -data=>$data );
				
				NO_SOCKET:
			}
			$splash->{"window"}->destroy;
		}
	}
	elsif($data->{"logon_session"}) {
		my($parent) = $entry =~ /^(.*?)\/[^\/]+$/;
		my $parent_data = $treebox1->info( data=>$parent );
		SessLoad($parent_data->{"file"});
		$textarea1_ignore_modify = 1;
		$_ = $data->{"port"};
		replacer('port', $_) if /^\d*$/ and $_<65536;
		$textarea1_ignore_modify = 0;
	}
}

sub SessLoad {
	my $file = $_[0];
	$Cwd = substr dirname($file), length "$sess_dir/";
	$label1->configure( -text=>basename($file), -foreground=>"black" );
#	$textarea1_modlock = $replacer_lock = 1;
	
	RESET_OPTS:
	for my $k (keys %vncopt) {
		for($frame3->children) {
			if($_->class eq 'Checkbutton' and lc $_->cget('-text') eq $k) {
				$vncopt{$k} = 0;
				next RESET_OPTS;
			}
		}
		delete $vncopt{$k};
	}
	$vnchost = $vncport = $vncpass = $vncpass_hash = '';
	$opt_txt{'preferredencoding'} = 'auto';
	$opt_txt{'lowcolourlevel'} = $ColourLevel_txt{1};
	
	$textarea1->Contents('');
	open my $fh, '<', $file;
	s/[\r\n]+$/\n/ and $textarea1->Insert($_) while(<$fh>);
	close $fh;
#	parse_textarea($textarea1->Contents);
	$textarea1->SetCursor('1.0');
	$Loaded = $file;
	
#	$textarea1_modlock = $replacer_lock = 0;
	$menuitem3->configure( -foreground=>'', -activeforeground=>'' );
	$Unsaved = 0;
}
sub SessRen {
	$_[1] =~ s/\x00//g;
	$_[1] =~ s/[\/\\]//g;
	my $filename0 = $_[0];
	my $filename1 = "$sess_dir/$Cwd/" . $_[1] . ".vnc";
	if(!-e $filename0 or $Unsaved) {
		$label1->configure( -text=>$_[1], -foreground=>"black" );
		$Loaded = $filename1;
	} else {
		my $success = rename $filename0, $filename1;
		if($success) {
			sess_load if $no_watch;
			SessLoad($filename1);
		}
		else {
			my $errstr = $!;
			warn "rename '$filename0' to '$filename1': $errstr";
			$dialog3->configure( -message=>"Error renaming", -detail=>"$errstr\n$filename0\n$filename1" );
			$dialog3->Show();
		}
	}
}
sub get_anchored_file {
	my $entry = $treebox1->info('anchor');
	my $data = $treebox1->info( data=>$entry );
	return $data->{"file"};
}
sub SessDel {
	my $entry = $treebox1->info('anchor');
	my $sess_name = basename($entry);
	my $file = get_anchored_file();
	if(defined $file) {
		$dialog2->configure( -detail=>$sess_name );
		if($dialog2->Show eq 'yes') {
			if(not unlink $file) {
				my $errstr = $!;
				warn "rm: $file: $errstr";
				$dialog3->configure( -message=>"Error removing", -detail=>"$errstr\n$file" );
				$dialog3->Show();
			}
		}
	}
}

sub Pref {
	$Pref{$_[0]} = $_[1];
	open my $fh, '>', $pref_file;
	print $fh XMLout(\%Pref);
	close $fh;
}


$window1->bind('<Control-q>' => \&mori);
$window1->bind('<Control-s>' => \&SessSave);
$window1->bind('<Control-n>' => \&SessNew);
$window1->bind('<Escape>' => sub{ $menubar3->unpost; });
$window1->bind('<Button-1>' => sub{ $menubar3->unpost; });
$treebox1->bind('<Button-3>' => [sub {
	my($w, $x, $y) = @_;
	$menubar3->unpost;
	$w->selectionClear();
	$w->anchorSet( $treebox1->nearest($y - $w->rooty) );
	%Click = ();
	$menubar3->post($x, $y);
    }, Ev('X'), Ev('Y')]);
$textarea1->bind('<<Modified>>', sub {
	return if $textarea1_modlock;
	$textarea1_modlock = 1;
	if(!$textarea1_ignore_modify) {
		$menuitem3->configure( -foreground=>"blue", -activeforeground=>"blue" );
		$Unsaved = 1;
	}
	#$textarea1->after(100, sub{ parse_textarea($textarea1->Contents) });
	$textarea1->editModified(0);
	$textarea1_modlock = 0;
	parse_textarea($textarea1->Contents);
    });
$label1->bind('<Button-1>', sub {
	return unless defined $Loaded;
	$inputbox1->delete(0, 'end');
	$inputbox1->insert(0, basename($Loaded));
	$inputbox1->focus(-force);
	if($dialog1->Show() eq "ok") {
		SessRen($Loaded, $inputbox1->get);
	}
    });


$frame1->pack(qw/-side left -fill y/);
$treebox1->pack(qw/-side top -fill both -expand 1/);
$adjuster1->pack(qw/-side left -fill y/);
$frame2->pack(qw/-side bottom -fill both -expand 1/);
$label1->pack(qw/-side top -fill x -expand 0 -pady 3 -padx 3/);
if($Pref{'ini_editor'} == 1) {
	$textarea1->pack(qw/-side right -fill both -expand 1/);
}
$frame3->pack(qw/-side top -fill both -expand 0/);
$frame4->pack(qw/-side bottom -fill both -expand 1/);


sub btn3text {
	if(eval q{$textarea1->packInfo;1;}) {
		$button3_text = "Basic <<";
	} else {
		$button3_text = "Advanced >>";
	}
}
btn3text();


sub bury {
	my @new;
	for(@Forks) {
		my $w;
		if($_->{'nowait'}) { $w = $_->{'pid'}; }
		else { $w = waitpid $_->{'pid'}, WNOHANG; }
		if($w == 0) { push @new, $_; }
		else { $_ = $_->{'file'}; defined $_ and (unlink $_ or warn "$_: $!"); }
	}
	@Forks = @new;
};
$SIG{'CHLD'} = \&bury;
sub mori {
	for(@Forks) {
		$_ = $_->{'file'};
		defined $_ and (unlink $_ or warn "$_: $!");
	}
	for($window1->children) {
		if($_->class eq 'Toplevel') {
			close_toplevel($_);
		}
	}
	$window1->destroy;
}
$SIG{'INT'} = $SIG{'QUIT'} = $SIG{'TERM'} = \&mori;
sub close_toplevel {
	my $window = shift;
	for($window->children) {
		if($_->Name eq "passwordFile") {
			$_ = $_->cget('-text');
			if(-e $_) { unlink $_ and print "rm: $_\n" or warn "rm: $_: $!"; }
			last;
		}
	}
	$window->destroy;
}


MainLoop;

