#!/usr/bin/env perl

use Data::Dumper;
use POSIX qw/:sys_wait_h/;
use Tk;
use Tk::JPEG;
use MIME::Base64;
use Time::HiRes qw/gettimeofday/;
use File::Temp qw/tempfile/;
use IPC::Open3;
use Symbol qw/gensym/;
use Crypt::DES;

$Crypter = new Crypt::DES(pack("H16", "E84AD660C4721AE0"));
$sess_dir = $ENV{'HOME'}."/.vnc/sessions/";
$Loaded = undef;
$Unsaved = $textarea1_modlock = $replacer_lock = 0;
$vnchost, $vncport, $vncpass_hash, %vncopt;
%ColourLevel = qw/rgb111 0 rgb222 1 pal8 2/;
$str_unsaved = "Unsaved Session";



$window1 = new MainWindow( -title=>"tkVNCman" );
$window1->geometry("500x300");

$frame1 = $window1->Frame();
$adjuster1 = $window1->Adjuster( -widget=>$frame1, -side=>'left' );
$frame2 = $window1->Frame();
$label1 = $frame2->Label( -text=>"Select a VNC session!", -foreground=>"darkgreen", -background=>"white", -relief=>'groove' );
$tooltip1 = $label1->Balloon(-background=>"lightyellow");
$tooltip1->attach($label1, -initwait=>300, -balloonposition=>'mouse', -balloonmsg=>"Click to Rename");
$tooltip2 = $frame1->Balloon(-background=>"lightyellow");
$tooltip2->attach($frame1, -initwait=>300, -balloonposition=>'mouse', -balloonmsg=>"Left click: select\nRight click: delete");

$menubar1 = $window1->Menu();
eval q{
	use Linux::Inotify2;
	$watcher = new Linux::Inotify2;
	$watcher->watch($sess_dir, IN_CREATE|IN_DELETE|IN_MODIFY|IN_MOVE, \&sess_load);
	$watcher->blocking(0);
	$window1->repeat(1000, sub{ $watcher->poll; });
	1;
}
or $no_watch=1;
if($no_watch) {
	$frame1->Button( -text=>"Refresh", -height=>1, -command=>\&sess_load )->pack(qw/-side bottom -fill x -expand 0/);
}

$menubar1->command( -label=>"~Connect", -command=>sub{ SessStart($textarea1->Contents, 'vncviewer'); } );
if(system("which vncsnapshot")==0) {
	$menubar1->command( -label=>"S~napshot", -command=>sub{ SessStart($textarea1->Contents, 'vncsnapshot'); } );
} else {
	print STDERR "No vncsnapshot installed.\n";
}

$menuitem3 = $menubar1->command( -label=>"~Save", -command=>\&SessSave );
$menubar1->command( -label=>"~New", -command=>sub{
	$Loaded = $str_unsaved;
	$label1->configure( -text=>$Loaded, -foreground=>"black" );
	$textarea1->Contents("host=\nport=\n");
	$textarea1->SetCursor('1.5');
	$textarea1->focus();
    });
$menubar1->separator();
$menubar1->command( -label=>"E~xit", -foreground=>"darkred", -activebackground=>"darkred", -activeforeground=>"white", -command=>\&mori );
$window1->configure( -menu=>$menubar1 );


$listbox1 = $frame1->Scrolled(
	'Listbox',
	-height=>0,
	-width=>14,
	-scrollbars=>'e',
	-selectmode=>'single',
);
$textarea1 = $frame2->Scrolled(
	'Text',
	-height=>'1',
	-width=>'1',
	-scrollbars=>'osoe',
	-wrap=>'no',
);
$frame3 = $frame2->Frame(
	-relief=>'sunken',
	-width=>1
);
$frame4 = $frame2->Frame();

$frame3->Label( -text=>"Host" )
	->grid(qw/-row 0 -column 0 -sticky nw/);
$frame3->Entry( -textvariable=>\$vnchost, 
	-vcmd=>sub{
		replacer('host', $_[0]);
	}, -validate=>'key' )
	->grid(qw/-row 0 -column 1 -sticky nw -columnspan 2/);
$frame3->Label( -text=>"Port" )
	->grid(qw/-row 1 -column 0 -sticky nw/);
$frame3->Entry( -textvariable=>\$vncport, 
	-vcmd=>sub{
		$_=shift;
		return replacer('port', $_) if /^\d*$/ and $_<65536;
		return 0
	}, -validate=>'key' )
	->grid(qw/-row 1 -column 1 -sticky nw -columnspan 2/);
$frame3->Label( -text=>"Password" )
	->grid(qw/-row 2 -column 0 -sticky nw/);
$inputbox2 = $frame3->Entry( -textvariable=>\$vncpass, -show=>'*', -width=>16,
	-vcmd=>sub{
		replacer('password', $_[0] eq '' ? '' : pass_enc($_[0]));
	}, -validate=>'key' )
	->grid(qw/-row 2 -column 1 -sticky nw/);
$button2 = 
$frame3->Button( -width=>16, -height=>15, 
	-command=>sub {
		$inputbox2->configure( -show=> defined $inputbox2->cget('-show') ? undef : '*' );
	},
	-image=>$frame3->Pixmap(-data=> <<EOF
		/* XPM */
		static char *a[] = {
		"15 17 2 1",
		"  c #000000000",
		". c #d9dd9dd9d",
		"...............",
		"...............",
		"...............",
		"....        ...",
		"...    .. .....",
		"..     .. .....",
		"..     .. .....",
		"..     .. .....",
		"...    .. .....",
		"....   .. .....",
		"...... .. .....",
		"...... .. .....",
		"...... .. .....",
		"...... .. .....",
		"...... .. .....",
		"...............",
		"..............."
		};
EOF
	))->grid(qw/-row 2 -column 2 -sticky nw/);
$tooltip2 = $button2->Balloon(-background=>"lightyellow");
$tooltip2->attach($button2, -initwait=>300, -balloonposition=>'mouse', -balloonmsg=>"Show / Hide password");

my $row = 2;
for my $lbl (qw/FullScreen Shared ViewOnly/) {
	$row++;
	$frame3->Checkbutton(
		-text=>$lbl,
		-onvalue=>1,
		-offvalue=>0,
		-variable=>\$vncopt{lc $lbl},
		-command=>sub { replacer($lbl, $vncopt{lc $lbl}) },
	)->grid(-row=>$row, -column=>0, -sticky=>'nw', -columnspan=>2);
}


$dialog1 = $window1->DialogBox( 
	-title   => "Rename",
	-buttons => ["ok", "cancel"] 
);
$inputbox1 = $dialog1->add('LabEntry', -width=>40)->pack();
$dialog2 = $window1->MsgBox(
	-title=>"Delete", 
	-message=>"Delete this session?", 
	-icon=>'warning', 
	-type=>'yesno', 
	-default=>'no'
);
$dialog3 = $window1->MsgBox(
	-title=>"Error", 
	-icon=>'error', 
	-type=>'ok', 
);




sub pass_enc { return join '', map {sprintf "%02x", ord $_} split //, $Crypter->encrypt(substr $_[0].("\x00" x 8), 0, 8); }
sub pass_dec { return $Crypter->decrypt(join '', map {chr hex $_} grep {length} split /(..)/, $_[0]); }

sub replacer {
	return 1 if $replacer_lock;
	my $_ = $textarea1->Contents;
	my $cpos = $textarea1->index('insert') || '1.0';
	my($ypos) = ($textarea1->yview);
	my($xpos) = ($textarea1->xview);
	s/^(\s*)(\Q$_[0]\E)(\s*)=.*/$1$2$3=$_[1]/mi   or  s/\n*$/\n$_[0]=$_[1]\n/;
	s/\n*$/\n/;
	$textarea1->Contents($_) if $textarea1->Contents ne $_;
	$textarea1->SetCursor($cpos);
	$textarea1->yviewMoveto($ypos);
	$textarea1->xviewMoveto($xpos);
	return 1;
}
sub parse_textarea {
	$replacer_lock = 1;
	for(split /[\r\n]+/, $_[0]) {
		s/\s*$//;
		my ($_, $val) = (/^\s*(\S+)\s*=\s*(.*)/);
		if(/^host$/i && $val!~/\s/) { $vnchost = $val; }
		elsif(/^port$/i && $val=~/^\d*$/ && $val<65536) { $vncport = $val; }
		elsif(/^Preferred_?Encoding|FullScreen|Shared|ViewOnly|MenuKey|DotWhenNoCursor|UseLocalCursor|Log|FullColou?r$/i) {
			s/_//g;
			s/Colour/Color/;
			$vncopt{lc $_} = $val;
		}
		elsif(/^ClientCutText$/i) { $vncopt{lc 'SendClipboard'}=$opt{lc 'SendPrimary'}=$val; }
		elsif(/^ServerCutText$/i) { $vncopt{lc 'AcceptClipboard'}=$val; }
		elsif(/^Colou?r_?Level$/i) { $vncopt{lc 'LowColourLevel'}=$ColourLevel{$val}; }
		elsif(/^password$/i && $val=~/^[[:xdigit:]]{16}$/i) { $vncpass_hash = $val; $vncpass = pass_dec($val); }
	}
	$replacer_lock = 0;
	print Dumper \%vncopt;
}

sub vncsnapshot {
	my $display = shift;
	my %opt = @_;
	my ($vncsnapshot);
	if(not defined $opt{'PasswordFile'}) {
		my ($tmpfh, $tmpfile) = tempfile();
		# create an empty file avoid tty block by vncsnapshot prompting for password on password-protected vnc servers
		close $tmpfh;
		$opt{'PasswordFile'}=$tmpfile;
	}
	my @args = ('vncsnapshot', '-passwd', $opt{'PasswordFile'}, '-cursor', $display, "/dev/stdout");
	local $, = ' ';
	print @args, "\n";
	
	my($img, $errstr);
	my $imgfd = gensym;
	my $errfd = gensym;
	my $pid = open3('/dev/zero', $imgfd, $errfd, @args);
	$img .= $_ while <$imgfd>;
	$errstr .= $_ while <$errfd>;
	waitpid $pid, 0;
	$vncsnapshot = $?>>8;
	
	if($vncsnapshot!=0) {
		my $_ = $opt{'PasswordFile'};
		unlink $_ or warn "$_: $!";
		$dialog3->configure( -message=>"vncsnapshot error", -detail=>"$errstr\n(exit code $vncsnapshot)" );
		$dialog3->Show();
	}
	return($img, $vncsnapshot);
}
sub SessStart {
	parse_textarea($_[0]);
	
	if(not $vnchost) { return 0; }
	my $display = $vnchost;
	if($vncport) { $display .= "::$vncport"; }
	
	my ($tmpfh, $tmpfile, $vncpass_hash_bin);
	if($vncpass_hash) {
		($tmpfh, $tmpfile) = tempfile();
		$vncpass_hash_bin = $vncpass_hash;
		$vncpass_hash_bin =~ s/(..)/chr hex $1/eg;
		print $tmpfh $vncpass_hash_bin;
		close $tmpfh;
		$vncopt{'PasswordFile'} = $tmpfile;
	}
	
	if($_[1] eq 'vncsnapshot') {
		my ($img, $vncsnapshot) = vncsnapshot($display, %vncopt);
		return $vncsnapshot if $vncsnapshot != 0;
		
		my $window2 = $window1->Toplevel( -title=>"VNC snapshot on [$display] at ".scalar(localtime) );
		$window2->geometry("640x480");
		$window2->Label(-text=>$vncopt{'PasswordFile'});
		my $label2 = $window2->Scrolled('Frame', -scrollbars=>'osoe')->pack(-expand=>1, -fill=>'both')
		->Label(
			-image=>$window2->Photo(-data=>encode_base64($img),
			-format=>'jpeg')
		);
		undef $img;
		$label2->pack( -expand=>1, -fill=>'both' );

		$window2->bind('<Escape>'=>sub { $window2->destroy; });
		$window2->bind('<q>'=>sub { $window2->destroy; });
		$label2->bind('<Button-3>'=>[sub {
			my($w, $x, $y) = @_;
			my $menubar2;
			for($w->children) {
				if($_->class eq 'Menu') {
					$_->unpost;
					$menubar2 = $_;
				}
			}
			if(not defined $menubar2) {
			    $menubar2 = $w->Menu( -tearoff=>0, -menuitems=>[
			    	[Button=>"Refresh", -command=>[sub {
			    		my $display = shift;
			    		my ($img, $vncsnapshot) = vncsnapshot($display, @_);
			    		if($vncsnapshot==0) {
						$window2->configure( -title=>"VNC snapshot on [$display] at ".scalar(localtime) );
						$label2->configure( -image=>$window2->Photo(-data=>encode_base64($img), -format=>'jpeg') );
					}
			    	}, $display, %vncopt]],
				[Button=>"Save image", -command=>sub {
					my $file = $window2->getSaveFile(-defaultextension=>".jpg", -initialfile=>"vncsnapshot.jpg", -title=>"Save image");
					if(defined $file) {
						my $img = decode_base64( $label2->cget('-image')->cget('-data') );
						open my $imgfd, '>', $file or goto FAILED;
						print $imgfd $img or goto FAILED;
						close $imgfd or goto FAILED;
						return 1;
						FAILED:
						$dialog2->configure( -message=>"Save file error", -detail=>$! );
						$dialog2->Show();
					}
				}],
				[Separator=>1],
				[Button=>"Close", -command=>[\&close_toplevel, $window2]]
			    ]);
			}
			$menubar2->post($x, $y);
		}, Ev('X'), Ev('Y')]);
		
		$label2->bind('<Button-1>'=>[sub {
			my $w = shift;
			$_->class eq 'Menu' and $_->unpost for $w->children;
		}]);
	}
	else {
		my $fork = fork;
		if($fork==0) {
			my @args = ('xvncviewer', $display, map {'-'.$_.'='.$vncopt{$_}} keys %vncopt);
			local $, = ' ';
			print @args, "\n";
			open STDIN, '/dev/zero';
			exec @args;
		}
		else {
			push @Forks, {'pid'=>$fork, 'file'=>$tmpfile};
		}
	}
}
sub sess_save {
	$_[1] =~ s/\n$//;
	$_[1] =~ s/\n/\r\n/g;
	open F, '>', $_[0] and
	print F $_[1] and
	close F;
}
sub SessSave {
	if(not defined $Loaded or $Loaded eq $str_unsaved) {
		$inputbox1->delete(0, 'end');
		my $display = $vnchost;
		if($vncport>=5900 && $vncport<=5950) {
			$display .= ':'.($vncport-5900);
		} else {
			$display .= '::'.$vncport;
		}
		$inputbox1->insert(0, $display);
		$inputbox1->focus(-force);
		if($dialog1->Show() eq "ok") {
			$Loaded = $inputbox1->get;
		}
	}
	if(defined $Loaded and $Loaded ne $str_unsaved) {
		sess_save("$sess_dir/$Loaded.vnc", $textarea1->Contents) and
		$menuitem3->configure( -foreground=>"", -activeforeground=>"" );
		$Unsaved = 0;
	}
}
sub SessSel {
	my ($index) = $listbox1->curselection();
	my $filename = $listbox1->get($index);
	my $now = scalar gettimeofday;
	if($Click{$filename} > $now-1.2 and $Loaded eq $filename) {
		return SessStart($textarea1->Contents, 1);
	}
	$Click{$filename} = $now;
	SessLoad($filename);
}
sub sess_load {
	$listbox1->delete(0, 'end');
	my @d = split/\/+/, $sess_dir;
	for(1..$#d) {
		my $d = join '/', @d[0..$_];
		if(! -e $d) { mkdir $d; }
	}
	opendir DIR, $sess_dir;
	$listbox1->insert('end', sort {$a cmp $b} map { s/\.vnc$//i; $_ } grep { -f "$sess_dir/$_" and /\.vnc$/i } readdir DIR);
	close DIR;
}
sess_load();
sub SessLoad {
	$label1->configure( -text=>$_[0], -foreground=>"black" );
#	$textarea1_modlock = $replacer_lock = 1;
	
	RESET_OPTS:
	for my $k (keys %vncopt) {
		for($frame3->children) {
			if($_->class eq 'Checkbutton' and lc $_->cget('-text') eq $k) {
				$vncopt{$k} = 0;
				next RESET_OPTS;
			}
		}
		delete $vncopt{$k};
	}
	$vnchost = $vncport = $vncpass = $vncpass_hash = '';
	
	$textarea1->Contents('');
	open my $fh, '<', "$sess_dir/$_[0].vnc";
	s/[\r\n]+$/\n/ and $textarea1->Insert($_) while(<$fh>);
	close $fh;
#	parse_textarea($textarea1->Contents);
	$textarea1->SetCursor('1.0');
	$Loaded = $_[0];
	
#	$textarea1_modlock = $replacer_lock = 0;
	$menuitem3->configure( -foreground=>'', -activeforeground=>'' );
	$Unsaved = 0;
}
sub SessRen {
	$_[1] =~ s/\x00//g;
	$_[1] =~ s/([\/\\])/\\$1/g;
	my $filename = "$sess_dir/$_[0].vnc";
	if(!-e $filename or $Unsaved) {
		$label1->configure( -text=>$_[1], -foreground=>"black" );
		$Loaded = $_[1];
	} else {
		rename $filename, "$sess_dir/$_[1].vnc";
		sess_load if $no_watch;
		SessLoad($_[1]);
	}
}
sub SessDel {
	my ($index) = $listbox1->curselection();
	return unless defined $index;
	my $sess_name = $listbox1->get($index);
	$dialog2->configure( -detail=>$sess_name );
	if($dialog2->Show eq 'yes') {
		unlink "$sess_dir/$sess_name.vnc";
	}
}


$window1->bind('<Escape>' => \&mori);
$window1->bind('<Control-q>' => \&mori);
$listbox1->bind('<Button-1>' => \&SessSel);
$listbox1->bind('<Button-3>' => \&SessDel);
$textarea1->bind('<<Modified>>', sub {
	return if $textarea1_modlock;
	$textarea1_modlock = 1;
	$menuitem3->configure( -foreground=>"blue", -activeforeground=>"blue" );
	$textarea1->after(100, sub{ parse_textarea($textarea1->Contents) });
	$Unsaved = 1;
	$textarea1->editModified(0);
	$textarea1_modlock = 0;
    });

$label1->bind('<Button-1>', sub {
	return unless defined $Loaded;
	$inputbox1->delete(0, 'end');
	$inputbox1->insert(0, $Loaded);
	$inputbox1->focus(-force);
	if($dialog1->Show() eq "ok") {
		SessRen($Loaded, $inputbox1->get);
	}
    });


$frame1->pack(qw/-side left -fill y/);
$listbox1->pack(qw/-side top -fill both -expand 1/);
$adjuster1->pack(qw/-side left -fill y/);
$frame2->pack(qw/-side bottom -fill both -expand 1/);
$label1->pack(qw/-side top -fill x -expand 0 -pady 3 -padx 3/);
$textarea1->pack(qw/-side right -fill both -expand 1/);
$frame3->pack(qw/-side top -fill both -expand 0/);
$frame4->pack(qw/-side bottom -fill both -expand 1/);



sub bury {
	my @new;
	for(@Forks) {
		my $w;
		if($_->{'nowait'}) { $w = $_->{'pid'}; }
		else { $w = waitpid $_->{'pid'}, WNOHANG; }
		if($w == 0) { push @new, $_; }
		else { $_ = $_->{'file'}; defined $_ and (unlink $_ or warn "$_: $!"); }
	}
	@Forks = @new;
};
$SIG{'CHLD'} = \&bury;
sub mori {
	for(@Forks) {
		$_ = $_->{'file'};
		defined $_ and (unlink $_ or warn "$_: $!");
	}
	for($window1->children) {
		if($_->class eq 'Toplevel') {
			close_toplevel($_);
		}
	}
	exit;
}
$SIG{'INT'} = $SIG{'QUIT'} = $SIG{'TERM'} = \&mori;
sub close_toplevel {
	my $window = shift;
	for($window->children) {
		if($_->class eq 'Label') {
			$_ = $_->cget('-text');
			unlink $_ or warn "$_: $!";
			last;
		}
	}
	$window->destroy;
}


MainLoop;

