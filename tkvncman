#!/usr/bin/env perl

use Data::Dumper;
use POSIX qw/:sys_wait_h/;
use Tk;
use Tk::JPEG;
use MIME::Base64;
use Time::HiRes qw/gettimeofday/;
use File::Temp qw/tempfile/;
use IPC::Open3;
use Symbol qw/gensym/;

$sess_dir = $ENV{'HOME'}."/.vnc/sessions/";
$Loaded = undef;
$Unsaved = 0;
$OutputTextModifyLock = 0;
%ColourLevel = qw/rgb111 0 rgb222 1 pal8 2/;



$mw = new MainWindow( -title=>"tkVNCman" );
$mw->geometry("500x300");

$lf = $mw->Frame;
$aj = $mw->Adjuster( -widget=>$lf, -side=>'left' );
$rf = $mw->Frame;
$lb = $rf->Label( -text=>"Select a VNC session!", -foreground=>"darkgreen" );
$ba = $mw->Balloon(-background=>"lightyellow");
$ba->attach($lb, -initwait=>300, -balloonposition=>'mouse', -balloonmsg=>"Click to Rename");

$mb = $mw->Menu();
eval q{
	use Linux::Inotify2;
	$watcher = new Linux::Inotify2;
	$watcher->watch($sess_dir, IN_CREATE|IN_DELETE|IN_MODIFY|IN_MOVE, \&sess_load);
	$watcher->blocking(0);
	$mw->repeat(1000, sub{ $watcher->poll; });
	1;
}
or $no_watch=1;
if($no_watch) {
	$lf->Button( -text=>"Refresh", -height=>1, -command=>\&sess_load )->pack(qw/-side bottom -fill x -expand 0/);
}

$mb->command( -label=>"~Connect", -command=>sub{ StartSession($OutputText->Contents(), 1); } );
if(system("which vncsnapshot")==0) {
	$mb->command( -label=>"S~napshot", -command=>sub{ StartSession($OutputText->Contents(), 'vncsnapshot'); } );
} else {
	print STDERR "No vncsnapshot.";
}

$btnSave = $mb->command( -label=>"~Save", -command=>\&sess_save );
$mb->command( -label=>"~New", -command=>sub{
	$Loaded = "Unsaved Session";
	$lb->configure( -text=>$Loaded, -foreground=>"black" );
	$OutputText->Contents("[connection]\nhost=\nport=\n\n[options]\n");
	$OutputText->SetCursor('2.5');
	$OutputText->focus();
    } );
$mb->separator();
$mb->command( -label=>"E~xit", -foreground=>"darkred", -activebackground=>"darkred", -activeforeground=>"white", -command=>\&mori );
$mw->configure( -menu=>$mb );


$ListBox = $lf->Scrolled(
	'Listbox',
	-height=>0,
	-width=>14,
	-scrollbars=>'e',
	-selectmode=>'single',
	);
$OutputText = $rf->Scrolled(
	'Text',
	-height=>'1',
	-width=>'1',
	-scrollbars=>'osoe',
	-wrap=>'no',
	);


$InputBox = $mw->DialogBox( 
	-title   => "Rename",
	-buttons => ["ok", "cancel"] 
	);
$InputBoxEntry = $InputBox->add('LabEntry', -width=>40)->pack();

$DelMsgBox = $mw->MsgBox(
	-title=>"Delete", 
	-message=>"Delete this session?", 
	-icon=>'warning', 
	-type=>'yesno', 
	-default=>'no'
	);
$ErrMsgBox = $mw->MsgBox(
	-title=>"Error", 
	-icon=>'error', 
	-type=>'ok', 
	);




sub sess_load {
	$ListBox->delete(0, 'end');
	my @d = split/\/+/, $sess_dir;
	for(1..$#d) {
		my $d = join '/', @d[0..$_];
		if(! -e $d) { mkdir $d; }
	}
	opendir DIR, $sess_dir;
	$ListBox->insert('end', sort {$a cmp $b} map { s/\.vnc$//i; $_ } grep { -f "$sess_dir/$_" and /\.vnc$/i } readdir DIR);
	close DIR;
}

sess_load();
sub sess_save {
	if(defined $Loaded) {
		SaveSession("$sess_dir/$Loaded.vnc", $OutputText->Contents()) and
		$btnSave->configure( -foreground=>"", -activeforeground=>"" );
		$Unsaved = 0;
	}
}


sub ini_parse {
	my ($host, $port, $passhash, %opt);
	for(split /[\r\n]+/, $_[0]) {
		s/\s*$//;
		my ($_, $val) = (/^\s*(\S+)\s*=\s*(.*)/);
		$_ = lc $_;
		if(/^host|port$/i) { eval "\$$_ = \$val"; }
		elsif(/^Preferred_?Encoding|FullScreen|Shared|MenuKey|DotWhenNoCursor|UseLocalCursor|Log|FullColou?r$/) {
			s/_//g;
			$opt{$_}=$val;
		}
		elsif(/^ClientCutText$/) { $opt{'SendClipboard'}=$opt{'SendPrimary'}=$val; }
		elsif(/^ServerCutText$/) { $opt{'AcceptClipboard'}=$val; }
		elsif(/^Colou?r_?Level$/) { $opt{'LowColourLevel'}=$ColourLevel{$val}; }
		elsif(/^password$/ and length($val)) { $passhash = $val; }
	}
	return $host, $port, $passhash, %opt;
}

sub vncsnapshot {
	my ($host, %opt) = @_;
	
	my ($tmpfh, $tmpfile);
	if(not defined $opt{'PasswordFile'}) {
		($tmpfh, $tmpfile) = tempfile();
		close $tmpfh;
		$opt{'PasswordFile'}=$tmpfile;
	}
	my @args = ('vncsnapshot', '-passwd', $opt{'PasswordFile'}, '-cursor', $host, "/dev/stdout");
	local $, = ' ';
	print @args, "\n";
	
	my($img, $errstr);
	my $imgfd = gensym;
	my $errfd = gensym;
	my $pid = open3('/dev/zero', $imgfd, $errfd, @args);
	$img .= $_ while <$imgfd>;
	$errstr .= $_ while <$errfd>;
	waitpid $pid, 0;
	$vncsnapshot = $?>>8;
	
	unlink $opt{'PasswordFile'} or warn $opt{'PasswordFile'}.": $!";
	
	if($vncsnapshot!=0) {
		$ErrMsgBox->configure( -message=>"vncsnapshot error", -detail=>"$errstr\n(exit code $vncsnapshot)" );
		$ErrMsgBox->Show();
	}
	return($img, $vncsnapshot);
}

sub StartSession {
	my (%opt, $host, $port, $passhash);
	($host, $port, $password, %opt) = ini_parse($_[0]);
	if(not $host) { return 0; }
	if($port) { $host .= "::$port"; }
	my ($tmpfh, $tmpfile);
	if(defined $passhash) {
		($tmpfh, $tmpfile) = tempfile();
		$passhash =~ s/(..)/chr hex $1/g;
		print $tmpfh $passhash;
		close $tmpfh;
		$opt{'PasswordFile'}=$tmpfile;
	}
	
	if($_[1] eq 'vncsnapshot') {
		my ($img, $vncsnapshot) = vncsnapshot($host, %opt);
		return $vncsnapshot if $vncsnapshot!=0;
		
		my $top = $mw->Toplevel( -title=>"snapshot on [$host] at ".scalar(localtime) );
		$top->geometry("640x480");
		my $k = $top->Scrolled('Frame', -scrollbars=>'osoe')->pack(-expand=>1, -fill=>'both')
		 ->Label( -image=>$top->Photo(-data=>encode_base64($img), -format=>'jpeg') );
		undef $img;
		$k->pack( -expand=>1, -fill=>'both' );

		$top->bind('<Escape>'=>sub { $top->destroy; });
		$top->bind('<q>'=>sub { $top->destroy; });
		$k->bind('<Button-3>'=>[sub {
			my($w, $x, $y) = @_;
			my $ctxmenu;
			for($w->children) {
				if($_->class eq 'Menu') {
					$_->unpost;
					$ctxmenu = $_;
				}
			}
			if(not defined $ctxmenu) {
			    $ctxmenu = $w->Menu( -tearoff=>0, -menuitems=>[
			    	[Button=>"Refresh", -command=>sub {
			    		my ($img, $vncsnapshot) = vncsnapshot($host, %opt);
			    		if($vncsnapshot==0) {
						$top->configure( -title=>"snapshot on [$host] at ".scalar(localtime) );
						$k->configure( -image=>$top->Photo(-data=>encode_base64($img), -format=>'jpeg') );
					}
			    	}],
				[Button=>"Save", -command=>sub {
					my $file = $top->getSaveFile(-defaultextension=>".jpg", -initialfile=>"vncsnapshot.jpg", -title=>"Save image");
					if(defined $file) {
						my $img = decode_base64( $k->cget('-image')->cget('-data') );
						open my $imgfd, '>', $file or goto FAILED;
						print $imgfd $img or goto FAILED;
						close $imgfd or goto FAILED;
						return 1;
						FAILED:
						$ErrMsgBox->configure( -message=>"Save file error", -detail=>$! );
						$ErrMsgBox->Show();
					}
				}],
				[Separator=>1],
				[Button=>"Close", -command=>sub {$top->destroy;}]
			    ]);
			}
			$ctxmenu->post($x, $y);
		}, Ev('X'), Ev('Y')]);
		$k->bind('<Button-1>'=>[sub {
			my $w = shift;
			$_->class eq 'Menu' and $_->unpost for $w->children;
		}]);
	}
	else {
		my $fork = fork;
		if($fork==0) {
			my @args = ('xvncviewer', $host, map {'-'.$_.'='.$opt{$_}} keys %opt);
			local $, = ' ';
			print @args, "\n";
			open STDIN, '/dev/zero';
			exec @args;
		}
		else {
			push @Forks, {'pid'=>$fork, 'file'=>$tmpfile};
		}
	}
}

sub SaveSession {
	$_[1] =~ s/\n$//;
	$_[1] =~ s/\n/\r\n/g;
	open F, '>', $_[0] and
	print F $_[1] and
	close F;
}
sub SelSession {
	my ($index) = $ListBox->curselection();
	my $filename = $ListBox->get($index);
	my $now = scalar gettimeofday;
	if($Click{$filename} > $now-1.2 and $Loaded eq $filename) {
		return StartSession($OutputText->Contents(), 1);
	}
	$Click{$filename} = $now;
	LoadSession($filename);
}
sub LoadSession {
	$lb->configure( -text=>$_[0], -foreground=>"black" );
	$OutputText->Contents('');
	open F, '<', "$sess_dir/$_[0].vnc";
	s/[\r\n]+$/\n/ and $OutputText->Insert($_) while(<F>);
	close F;
	$OutputText->SetCursor('1.0');
	$Loaded = $_[0];
	$btnSave->configure( -foreground=>"", -activeforeground=>"" );
	$Unsaved = 0;
}
sub RenameSess {
	$_[1] =~ s/\x00//g;
	$_[1] =~ s/([\/\\])/\\$1/g;
	my $f = "$sess_dir/$_[0].vnc";
	if(!-e $f or $Unsaved) {
		$lb->configure( -text=>$_[1], -foreground=>"black" );
		$Loaded = $_[1];
	} else {
		rename $f, "$sess_dir/$_[1].vnc";
		sess_load if $no_watch;
		LoadSession($_[1]);
	}
}
sub DelSess {
	my ($index) = $ListBox->curselection();
	return unless defined $index;
	my $name = $ListBox->get($index);
	$DelMsgBox->configure(-detail=>$name);
	if($DelMsgBox->Show eq 'yes') {
		unlink "$sess_dir/$name.vnc";
	}
}


$mw->bind('<Escape>' => \&mori);
$ListBox->bind( '<Button-1>', [\&SelSession] );
$ListBox->bind( '<Button-3>', [\&DelSess] );
$OutputText->bind( '<<Modified>>', [sub {
	return if $OutputTextModifyLock;
	$OutputTextModifyLock = 1;
	$btnSave->configure( -foreground=>"blue", -activeforeground=>"blue" );
	$Unsaved = 1;
	$OutputText->editModified(0);
	$OutputTextModifyLock = 0;
    }] );
$lb->bind( '<Button-1>', [sub {
	return unless defined $Loaded;
	$InputBoxEntry->delete(0, 'end');
	$InputBoxEntry->insert(0, $Loaded);
	$InputBoxEntry->focus(-force);
	my $ret = $InputBox->Show;
	if($ret eq "ok") {
		RenameSess($Loaded, $InputBoxEntry->get());
	}
    }] );


$lf->pack(qw/-side left -fill y/);
$aj->pack(qw/-side left -fill y/);
$rf->pack(qw/-side bottom -fill both -expand 1/);
$lb->pack(qw/-side top -fill x -expand 0/);
$ListBox->pack(qw/-side bottom -fill both -expand 1/);
$OutputText->pack(qw/-side bottom -fill both -expand 1/);



sub bury {
	my @new;
	for(@Forks) {
		my $w = waitpid $_->{'pid'}, WNOHANG;
		if($w == 0) { push @new, $_; }
		else { $_ = $_->{'file'}; defined $_ and (unlink $_ or warn "$_: $!"); }
	}
	@Forks = @new;
};
$SIG{'CHLD'} = \&bury;
sub mori {
	for(@Forks) {
		$_ = $_->{'file'};
		defined $_ and (unlink $_ or warn "$_: $!");
	}
	exit;
}
$SIG{'INT'} = $SIG{'QUIT'} = $SIG{'TERM'} = \&mori;



MainLoop;

